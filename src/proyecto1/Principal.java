/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyecto1;

import java.io.File;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyledDocument;
import java.awt.Color;
import java.awt.Image;
import java.io.IOException;
import java.net.URL;
import javax.imageio.ImageIO;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import syntaxtree.*;
import visitor.Visitor1;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeModel;

/**
 *
 * @author Alejandro
 */


//Clase empleada para poder manejar archivos
class FileTypeFilter extends FileFilter{
    private final String extension;
    private final String description;
    
    //Constructor clase FileTypeFilter
    public FileTypeFilter(String extension,String description){
        this.extension=extension;
        this.description=description;
        
    }

    @Override
    public boolean accept(File file) {
        if (file.isDirectory()){
            return true;
        }
        return file.getName().endsWith(extension);
    }

    @Override
    public String getDescription() {
        return description+String.format("(*%s)",extension);
    }
    
}

public class Principal extends javax.swing.JFrame {
    //Atributos
    ImageIcon icon,miniIcon;
    Image miniImagen;
    public DefaultTreeModel modeloRecibido; //Recibe el modelo de Visitor
    //Visitor1 imprimir=new Visitor1();
    //public DefaultTreeModel modelo2;
    
    //Constructor
    public Principal() throws IOException {
        initComponents();
        
        //Cargar icono a logo y nodos
        InputStream inputStream = getClass().getResourceAsStream("/proyecto1/resources/logo.jpg");
        icon = new ImageIcon(ImageIO.read(inputStream)); //Sirve para agregar icono a mi ventana
        setIconImage(icon.getImage()); //Se establece el archivo de icono
        
        //miniImagen = icon.getImage().getScaledInstance(20, 20,  java.awt.Image.SCALE_SMOOTH); //Agarro mi imagen para hacerla chica
        //miniIcon=new ImageIcon(miniImagen); //La asigno a mi icono
        //DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) arbol.getCellRenderer();   //Elijo mi arbol
        //renderer.setLeafIcon(miniIcon); //Se establece el icono
        
        
        
        getContentPane().setBackground(new Color(30,30,30,255));  
        txtCodigo.setCaretColor(Color.WHITE);
        txtCodigo.setDocument(doc);
        
        //modelo2=imprimir.modelo3;
       
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtCodigo = new javax.swing.JTextPane();
        btnLexico = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMensajes = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Polaris");
        setBackground(new java.awt.Color(30, 30, 30));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        txtCodigo.setBackground(new java.awt.Color(37, 37, 38));
        txtCodigo.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        txtCodigo.setForeground(java.awt.Color.white);
        txtCodigo.setName("txtxPanelCodigo"); // NOI18N
        jScrollPane1.setViewportView(txtCodigo);

        btnLexico.setBackground(java.awt.Color.white);
        btnLexico.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        btnLexico.setForeground(java.awt.Color.black);
        btnLexico.setText("<html> Analisis <br>Léxico/Sintáctico/Semántico </html>");
        btnLexico.setActionCommand("Análisis Léxico/Sintáctico");
        btnLexico.setName("btnLexico"); // NOI18N
        btnLexico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLexicoActionPerformed(evt);
            }
        });

        txtMensajes.setBackground(new java.awt.Color(37, 37, 38));
        txtMensajes.setColumns(20);
        txtMensajes.setFont(new java.awt.Font("Consolas", 0, 15)); // NOI18N
        txtMensajes.setForeground(java.awt.Color.white);
        txtMensajes.setRows(5);
        txtMensajes.setName("txtAreaConsola"); // NOI18N
        jScrollPane2.setViewportView(txtMensajes);

        jMenu1.setText("Archivo");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Abrir archivo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Guardar archivo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setText("Salir");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 929, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnLexico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 707, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 74, Short.MAX_VALUE)
                        .addComponent(btnLexico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)))
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(971, 681));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    //Abrir ventana Analizador Lexico
    private void btnLexicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLexicoActionPerformed
        ArrayList<Token> lista=new ArrayList<>();
        //Crear tabla de simbolos
        ArrayList<Simbolo> tabla=new ArrayList<>();
        try {
            //Creacion de ventana para mostrar salida
            Salida frmSalida = new Salida();
            frmSalida.setIconImage(icon.getImage()); //Se establece el archivo de icono
            frmSalida.getContentPane().setBackground(new Color(30,30,30,255));  
            frmSalida.setVisible(true);
            frmSalida.setResizable(false);
            
            //El contenido de la lista
            DefaultListModel<String> modelo=new DefaultListModel<>();
            frmSalida.listTokens.setModel(modelo); 
            InputStream targetStream = new ByteArrayInputStream(txtCodigo.getText().getBytes());
            ProyectoParcial1 leng=new ProyectoParcial1(lista,tabla,targetStream);
            
            Node raiz; 
            Visitor1 imprimir=new Visitor1();
            
            raiz=leng.Programa();
            //La lista generada por el Visitor se redirecciona al modelo
            //Modelo se requiere para estructurar  los niveles
            modeloRecibido=new DefaultTreeModel(new DefaultMutableTreeNode(raiz));     //Modelo vacio (ANALIZADOR SINTACTICO)
            //Mandar la lista al modelo para que aparezca en el List (ANALIZADOR LEXICO)
            txtMensajes.setText("Analisis Lexico exitoso!!!");
            for(Token token:lista){
                modelo.addElement(token.toString()); 
            }
            
            raiz.accept(imprimir);      
            modeloRecibido=imprimir.getModelo(); //Metodo para obtener el modelo del arbol
            //Imprimir el arbol en mi Ventana Arbol
            Arbol frmArbol=new Arbol();
            frmArbol.setIconImage(icon.getImage()); //Se establece el archivo de icono
            frmArbol.getContentPane().setBackground(new Color(30,30,30,255));  
            frmArbol.setVisible(true);
            frmArbol.setResizable(false);
            
            frmArbol.arbol.setModel(modeloRecibido); //Coloco mi modelo en un JTree designado
            
            //Imprimir tabla de simbolos
            System.out.println("---TABLA DE SIMBOLOS---");
            for(Simbolo simbolo:tabla){
                System.out.println(simbolo.toString());
            }
            System.out.println("--------------------");
            
            //Se crea la form para mostrar la tabla de Simbolos
            TablaSimbolos frmTablaSimbolos=new TablaSimbolos();
            frmTablaSimbolos.setIconImage(icon.getImage()); //Se establece el archivo de icono
            frmTablaSimbolos.getContentPane().setBackground(new Color(30,30,30,255));  
            frmTablaSimbolos.setVisible(true);
            frmTablaSimbolos.setResizable(false);
            
            //Se establaece un modelo en donde mostrar la información
            DefaultTableModel model=(DefaultTableModel) frmTablaSimbolos.tablaSimbolos.getModel();
            //Se pone porque va a manejar 2 atributos
            Object rowData[]=new Object[2];
            
            //Se insertan los datos en cada fila
            for(int i=0;i<tabla.size();i++){
                rowData[0]=tabla.get(i).nombre;
                rowData[1]=tabla.get(i).tipo;
                model.addRow(rowData);
            }
            
        } catch (TokenMgrError e) {
            txtMensajes.setText("Error lexico:"+e.getMessage());
            //Extraer posicion para colocar el cursor del error LEXICO
            String str=e.getMessage();
            str = str.replaceAll("[^-?0-9]+", " "); 
            List<String> strs=Arrays.asList(str.trim().split(" "));
            txtCodigo.setCaretPosition(txtCodigo.getDocument().getDefaultRootElement().getElement(Integer.parseInt(strs.get(0))-1).getStartOffset()); 
            txtCodigo.requestFocus();
            System.out.println(Arrays.asList(str.trim().split(" ")));
        }
        catch (ParseException e) {
            txtMensajes.setText("Error sintactico:"+e.getMessage());
            //Extraer posicion para colocar el cursor del error SINTACTICO
            String str=e.getMessage();
            str = str.replaceAll("[^-?0-9]+", " "); 
            List<String> strs=Arrays.asList(str.trim().split(" "));
            txtCodigo.setCaretPosition(txtCodigo.getDocument().getDefaultRootElement().getElement(Integer.parseInt(strs.get(0))-1).getStartOffset()); 
            txtCodigo.requestFocus();
            System.out.println(Arrays.asList(str.trim().split(" ")));
        }
        catch (ArithmeticException e) {
            txtMensajes.setText("Error semantico:"+e.getMessage());
            //Extraer posicion para colocar el cursor del error SINTACTICO
            String str=e.getMessage();
            str = str.replaceAll("[^-?0-9]+", " "); 
            List<String> strs=Arrays.asList(str.trim().split(" "));
            txtCodigo.setCaretPosition(txtCodigo.getDocument().getDefaultRootElement().getElement(Integer.parseInt(strs.get(0))-1).getStartOffset()); 
            txtCodigo.requestFocus();
            System.out.println(Arrays.asList(str.trim().split(" ")));
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }  
    }//GEN-LAST:event_btnLexicoActionPerformed
   
    //Abrir un archivo
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        //Establezco ruta predeterminada
        JFileChooser fs =new JFileChooser(new File("c:\\"));
        fs.setDialogTitle("Abrir un archivo");
        //Definicion de extension
        fs.setFileFilter(new FileTypeFilter(".pol","Archivo pol"));
        int result=fs.showOpenDialog(null);
        if(result==JFileChooser.APPROVE_OPTION){
            try {
                File fi=fs.getSelectedFile();
                BufferedReader br =new BufferedReader(new FileReader(fi.getPath()));
                String line="";
                String s ="";
                while((line=br.readLine())!=null){
                    s+=line+System.lineSeparator(); //Sin el System.lineSeparator, pone todo en un solo parrafo
                }
                txtCodigo.setText(s);
                if(br!=null)
                    br.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,e.getMessage());
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    //Guardar archivo
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
            //Definicion de ruta predeterminada
            JFileChooser fs =new JFileChooser(new File("c:\\"));
            fs.setDialogTitle("Guardar un archivo");
            //Con que nombre guardaria el archivo
            fs.setFileFilter(new FileTypeFilter(".pol","Archivo pol"));
            int result=fs.showSaveDialog(null);
            fs.getFileFilter();
            if(result==JFileChooser.APPROVE_OPTION){
                String content=txtCodigo.getText();
                File fi=fs.getSelectedFile();
                
                //Agrega extension si tiene o no, de tipo pol
                try {
                    if(!fi.getPath().endsWith(".pol")){
                        FileWriter fw =new FileWriter(fi.getPath()+".pol");
                    
                    fw.write(content);
                    fw.flush();
                    fw.close();
                    }
                    else{
                        FileWriter fw =new FileWriter(fi.getPath());
                    
                    fw.write(content);
                    fw.flush();
                    fw.close();
                    }
                    
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
            }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    //Cambiar a estilo Windows
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                Principal frmPrincipal = null;
                try {
                    frmPrincipal = new Principal();
                } catch (IOException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                frmPrincipal.setVisible(true);
                frmPrincipal.setResizable(false);
            }
        });
    }
    
    //Colorear mis tokens
    private int findLastNonWordChar(String text, int index) {
        while (--index >= 0) {
            if (String.valueOf(text.charAt(index)).matches("\\W")) {
                break;
            }
        }
        return index;
    }

    private int findFirstNonWordChar(String text, int index) {
        while (index < text.length()) {
            if (String.valueOf(text.charAt(index)).matches("\\W")) {
                break;
            }
            index++;
        }
        return index;
    }

    //Establecimiento de mis colores
    final StyleContext cont = StyleContext.getDefaultStyleContext();
    final AttributeSet cTipos = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(43,169,175));// Tipos de datos
    final AttributeSet cFunciones= cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(216,216,167)); //Funciones
    final AttributeSet cOperadores = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, Color.WHITE); //Operadores,TODOS FALTA
    final AttributeSet cParentesis = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(232,204,1)); //Parentesis normal
    final AttributeSet cBrackets = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(185,128,17)); //Brackets
    final AttributeSet cCurly = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(29,105,240)); //Curly
    final AttributeSet cNormal = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, Color.WHITE); //Color de mi texto
    final AttributeSet cSentencias = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(175,132,188)); //Color Sentencias
    final AttributeSet cVariable = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(136,209,251)); //Color Variable
    final AttributeSet cPuntuacion = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, Color.RED); //Color Variable
    final AttributeSet cComentario= cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, Color.GREEN); //Comentario de una linea
    final AttributeSet cMulti= cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, Color.GREEN); //Comentario multilinea
    
    DefaultStyledDocument doc = new DefaultStyledDocument() {
        @Override
        public void insertString(int offset, String str, AttributeSet a) throws BadLocationException {
            super.insertString(offset, str, a);

            String text = getText(0, getLength());
            int before = findLastNonWordChar(text, offset);
            if (before < 0) {
                before = 0;
            }
            int after = findFirstNonWordChar(text, offset + str.length());
            int wordL = before;
            int wordR = before;

            //Se tuvieron que adaptar expresiones JavaCC a ReGex
            while (wordR <= after) {
                if (wordR == after || String.valueOf(text.charAt(wordR)).matches("\\W")) {
                    if (text.substring(wordL, wordR).matches("(#.*$)")) {
                        setCharacterAttributes(wordL, wordR - wordL, cComentario, false);
                    } else if (text.substring(wordL, wordR).matches("(/\\*.*?\\*/)")) {
                        setCharacterAttributes(wordL, wordR - wordL, cMulti, false);
                    } else if (text.substring(wordL, wordR).matches("(\\W)*(int|float|String|variable)")) {
                        setCharacterAttributes(wordL, wordR - wordL, cTipos, false);
                    } else if (text.substring(wordL, wordR).matches("(\\W)*(readln|writeln)")) {
                        setCharacterAttributes(wordL, wordR - wordL, cFunciones, false);
                    } else if (text.substring(wordL, wordR).matches("(\\W)*(\\(|\\))")) {
                        setCharacterAttributes(wordL, wordR - wordL, cParentesis, false);
                    } else if (text.substring(wordL, wordR).matches("(\\W)*(\\[|\\])")) {
                        setCharacterAttributes(wordL, wordR - wordL,cBrackets , false);
                    } else if (text.substring(wordL, wordR).matches("(\\W)*(\\{|\\})")) {
                        setCharacterAttributes(wordL, wordR - wordL,cCurly , false);
                    } else if (text.substring(wordL, wordR).matches("(\\W)*(if|else|for|while|else if)")) {
                        setCharacterAttributes(wordL, wordR - wordL,cSentencias , false);
                    } else if (text.substring(wordL, wordR).matches("(\\W)*([a-zA-Z](\\w)*([a-zA-Z]|[0-9])*)")) { //w en regex es todo numero,letra y _
                        setCharacterAttributes(wordL, wordR - wordL,cVariable , false);
                    } else if (text.substring(wordL, wordR).matches("(\\W)*(= |\\+ |- |/ |\\* | \\*\\* |%% |== |< |> |<= |>= | && | \\|\\| |!= )")) {
                        setCharacterAttributes(wordL, wordR - wordL,cOperadores , false);
                    } else if (text.substring(wordL, wordR).matches("(\\W)*(\\.|;)")) {
                        setCharacterAttributes(wordL, wordR - wordL,cPuntuacion , false);
                    }else {
                        setCharacterAttributes(wordL, wordR - wordL, cNormal, false);
                    }
                    wordL = wordR;
                }
                wordR++;
            }
        }

        @Override
        public void remove(int offs, int len) throws BadLocationException {
            super.remove(offs, len);
            String text = getText(0, getLength());
            int before = findLastNonWordChar(text, offs);
            if (before < 0) {
                before = 0;
            }
            int after = findFirstNonWordChar(text, offs);
            try {
                if (text.substring(before, after - before).matches("(#.*$)")) {
                    setCharacterAttributes(before, after - before, cComentario, false);
                }else if (text.substring(before, after - before).matches("/\\*.*?\\*/")) {
                    setCharacterAttributes(before, after - before, cMulti, false);
                }else if (text.substring(before, after - before).matches("(\\W)*(int|float|String)")) {
                    setCharacterAttributes(before, after - before, cTipos, false);
                } else if (text.substring(before, after - before).matches("(\\W)*(readln|writeln)")) {
                    setCharacterAttributes(before, after - before, cFunciones, false);
                } else if (text.substring(before, after - before).matches("(\\W)*(\\(|\\))")) {
                    setCharacterAttributes(before, after - before, cParentesis, false);
                } else if (text.substring(before, after - before).matches("(\\W)*(\\[|\\])")) {
                    setCharacterAttributes(before, after - before, cBrackets, false);
                } else if (text.substring(before, after - before).matches("(\\W)*(\\{|\\})")) {
                    setCharacterAttributes(before, after - before, cCurly, false);
                } else if (text.substring(before, after - before).matches("(\\W)*(if|else|for|while|else if)")) {
                    setCharacterAttributes(before, after - before, cSentencias, false);
                }else if (text.substring(before, after - before).matches("(\\W)*([a-zA-Z](\\w)*([a-zA-Z]|[0-9])*)")) { //w en regex es todo numero,letra y _
                    setCharacterAttributes(before, after - before, cVariable, false);
                }else if (text.substring(before, after - before).matches("(\\W)*(= |\\+ |- |/ |\\* | \\*\\* |%% |== |< |> |<= |>= | && | \\|\\| |!= )")) { 
                    setCharacterAttributes(before, after - before, cOperadores, false);
                }else if (text.substring(before, after - before).matches("(\\W)*(\\.|;)")) { //w en regex es todo numero,letra y _
                    setCharacterAttributes(before, after - before, cPuntuacion, false);
                }else {
                    setCharacterAttributes(before, after - before, cNormal, false);
                }
            } catch (Exception e) {
            }
        }
    };
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLexico;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTextPane txtCodigo;
    private javax.swing.JTextArea txtMensajes;
    // End of variables declaration//GEN-END:variables
}
